#include <iostream>
#include <iomanip>

using namespace std;

// Используя подсказку из комментариев напишу следующий код:
// Создам 6 переменных типа double для хранения входных коэффициентов
// Также создам 3 дополнительных типа double для хранения вычисленных значений определетелей матрицы
// В основе расчетов, как и в прошлом задании, лежит метод Крамера
// Сразу считаю определитель основной матрицы и матриц с перестановками на столбец свободных членов (e f)
// Чтобы долго не расписывать работу программы, оставлю картинку с алгоритмом в папке.

int main() {
  double a, b, c, d, e, f, x1, x2, common;
    cin >> a >> b >> c >> d >> e >> f;
    common = a * d - c * b;
    cout << fixed << setprecision(11);
    x1 = e * d - f * b;
    x2 = a * f - c * e;
    if (common != 0){
        cout << "2" << " " << x1/common << " " << x2/common;
    }
    else{
        if (x1 == 0  && x2 == 0){
           if (a == 0 && b == 0 && c == 0 && d == 0){
               if(e != 0 || f != 0){
                   cout << "0";
               }
               else{
                   cout << "5";
               }
           }
            else{
                if(a == 0 && c == 0){
                    cout << "4" << " ";
                    if (b != 0){
                        cout << e/b;
                    }
                    else{
                        cout << f/d;
                    }
                }
                else{
                    if(b == 0 && d == 0){
                        cout << "3" << " ";
                        if (a != 0){
                            cout << e/a;
                        }
                        else{
                            cout << f/c;
                        }
                    }
                    else{
                        cout << "1" << " ";
                        if (b != 0){
                           cout << -1 * a/b << " " << e/b;
                        }
                        else{
                            cout << -1 * c/d << " " << f/d;
                        }
                    }
                }
            }   
        }
        else{
            cout << "0";
        }
    }
  return 0;
}
